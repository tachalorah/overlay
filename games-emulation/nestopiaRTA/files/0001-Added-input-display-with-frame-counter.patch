From 5410929b70037f488e2ec1d06eee00a910e543ba Mon Sep 17 00:00:00 2001
From: 108Pi <->
Date: Mon, 26 May 2025 02:20:52 -0700
Subject: [PATCH 1/7] Added input display with frame counter

---
 source/core/NstCpu.cpp             |   7 ++
 source/core/NstCpu.hpp             |   3 +
 source/core/NstMachine.cpp         |   2 +
 source/core/NstPpu.cpp             | 134 ++++++++++++++++++++++++++++-
 source/core/NstPpu.hpp             |   7 ++
 source/core/api/NstApiRewinder.cpp |   1 +
 6 files changed, 153 insertions(+), 1 deletion(-)

diff --git a/source/core/NstCpu.cpp b/source/core/NstCpu.cpp
index 28c41ce..553d9f9 100644
--- a/source/core/NstCpu.cpp
+++ b/source/core/NstCpu.cpp
@@ -156,6 +156,8 @@ namespace Nes
 		{
 			cycles.UpdateTable( GetModel() );
 			Reset( false, false );
+			sessionID = rand();
+			isClean = true;
 		}
 
 		#if NST_MSVC >= 1200
@@ -179,6 +181,8 @@ namespace Nes
 
 		void Cpu::Reset(const bool on,const bool hard)
 		{
+			sessionID = rand();
+			isClean = true;
 			if (!on || hard)
 			{
 				ram.Reset( GetModel() );
@@ -384,6 +388,9 @@ namespace Nes
 
 		void Cpu::LoadState(State::Loader& state,const dword cpuChunk,const dword apuChunk,const dword baseChunk)
 		{
+			sessionID = rand();
+			isClean = false;
+
 			if (baseChunk == cpuChunk)
 			{
 				CpuModel stateModel = GetModel();
diff --git a/source/core/NstCpu.hpp b/source/core/NstCpu.hpp
index 5a08d5e..4c951bb 100644
--- a/source/core/NstCpu.hpp
+++ b/source/core/NstCpu.hpp
@@ -45,6 +45,9 @@ namespace Nes
 
 			Cpu();
 
+			uint sessionID;
+			bool isClean;
+
 			enum
 			{
 				CYCLE_MAX = Cycle(~0UL),
diff --git a/source/core/NstMachine.cpp b/source/core/NstMachine.cpp
index 4b63632..e396eb5 100644
--- a/source/core/NstMachine.cpp
+++ b/source/core/NstMachine.cpp
@@ -523,6 +523,8 @@ namespace Nes
 				ppu.EndFrame();
 
 				renderer.bgColor = ppu.output.bgColor;
+				
+				ppu.DrawInputDisplay(input->pad->buttons, frame);
 
 				if (video)
 					renderer.Blit( *video, ppu.GetScreen(), ppu.GetBurstPhase() );
diff --git a/source/core/NstPpu.cpp b/source/core/NstPpu.cpp
index 3f37abd..1589499 100644
--- a/source/core/NstPpu.cpp
+++ b/source/core/NstPpu.cpp
@@ -26,6 +26,7 @@
 #include "NstCpu.hpp"
 #include "NstPpu.hpp"
 #include "NstState.hpp"
+#include <stdlib.h>
 
 namespace Nes
 {
@@ -1344,6 +1345,138 @@ namespace Nes
 			oam.address = (oam.address + 4) & 0xFF;
 		}
 
+		void Ppu::DrawInputDisplay(uint buttons, uint fc) 
+		{
+			int start = 55298; //index of top left pixel
+			int w = 38;
+			int h = 13;
+			DrawRectangle(start, 0, 0, w, h, 0x10);
+			for (int i = 0; i < 13; i++) {
+				DrawPixel(start, i, 0, 0x1D);
+			}
+
+			for (int i = 0; i < h - 1; i++) {
+				DrawPixel(start, 0, i, (cpu.sessionID >> i) % 2 ? (cpu.isClean ? 0x01 : 0x06) : 0x1D);
+			}
+
+			for (int i = 0; i < w - 1; i++) {
+				DrawPixel(start, i, h - 1, 0x1D);
+			}
+
+			for (int i = 6; i < h; i++) {
+				DrawPixel(start, w - 1, i, 0x1D);
+			}
+			DrawRectangle(start, 5, 5, 3, 3, 0x1D);
+			if (buttons & 0x80 && buttons & 0x40) {
+				buttons -= 0xC0;
+			}
+			int buttonColor = buttons&0x80 ? 0x20 : 0x1D; //right
+			DrawRectangle(start, 8, 5, 3, 3, buttonColor);
+			buttonColor = buttons&0x40 ? 0x20 : 0x1D; //left
+			DrawRectangle(start, 2, 5, 3, 3, buttonColor);
+			if (buttons & 0x20 && buttons & 0x10) {
+				buttons -= 0x30;
+			}
+			buttonColor = buttons&0x20 ? 0x20 : 0x1D; //down
+			DrawRectangle(start, 5, 8, 3, 3, buttonColor);
+			buttonColor = buttons&0x10 ? 0x20 : 0x1D; //up
+			DrawRectangle(start, 5, 2, 3, 3, buttonColor);
+			buttonColor = buttons&0x08 ? 0x20 : 0x1D; //start
+			DrawRectangle(start, 20, 8, 4, 2, buttonColor);
+			buttonColor = buttons&0x04 ? 0x20 : 0x1D; //select
+			DrawRectangle(start, 15, 8, 4, 2, buttonColor);
+			buttonColor = buttons&0x02 ? 0x20 : 0x1D; //B
+			DrawRectangle(start, 28, 6, 2, 4, buttonColor);
+			DrawRectangle(start, 27, 7, 4, 2, buttonColor);
+			buttonColor = buttons&0x01 ? 0x20 : 0x1D; //A
+			DrawRectangle(start, 33, 6, 2, 4, buttonColor);
+			DrawRectangle(start, 32, 7, 4, 2, buttonColor);
+
+			DrawNumber(start, fc % 10, 34);
+			DrawNumber(start, fc / 10 % 10, 29);
+			DrawNumber(start, fc / 100 % 10, 24);
+			DrawNumber(start, fc / 1000 % 10, 19);
+			DrawNumber(start, fc / 10000 % 10, 14);
+		}
+
+		void Ppu::DrawPixel(int start, int x, int y, int color) 
+		{
+			output.pixels[start + x + y * 256] = color;
+		}
+
+		void Ppu::DrawRectangle(int start, int x, int y, int w, int h, int color) {
+			for (int i = x; i < w + x; i++) {
+				for (int j = y; j < h + y; j++) {
+					DrawPixel(start, i, j, color);
+				}
+			}
+		}
+
+		void Ppu::DrawNumber(int start, int n, int x)
+		{
+
+	int numColor = 0x1D;
+	// if(_emu->GetConsole()->GetControlManager()->IsLagFrame()) {
+	// 	numColor = 0x00BB1111;
+	// }
+	DrawRectangle(start, x, 0, 4, 5, numColor);
+	int bgColor = 0x10;
+	switch(n) {
+		case 0:
+			DrawRectangle(start, x + 1, 1, 2, 3, bgColor);
+			break;
+
+		case 1:
+			DrawRectangle(start, x, 0, 1, 5, bgColor);
+			DrawRectangle(start, x + 1, 1, 1, 3, bgColor);
+			DrawRectangle(start, x + 3, 0, 1, 4, bgColor);
+			break;
+
+		case 2:
+			DrawRectangle(start, x,1, 3, 1, bgColor);
+			DrawRectangle(start, x + 1, 3, 3, 1, bgColor);
+			break;
+
+		case 3:
+			DrawRectangle(start, x, 1, 3, 1, bgColor);
+			DrawRectangle(start, x, 3, 3, 1, bgColor);
+			break;
+
+		case 4:
+			DrawRectangle(start, x, 3, 3, 2, bgColor);
+			DrawRectangle(start, x + 1, 0, 2, 2, bgColor);
+			break;
+
+		case 5:
+			DrawRectangle(start, x + 1, 1, 3, 1, bgColor);
+			DrawRectangle(start, x, 3, 3, 1, bgColor);
+			break;
+
+		case 6:
+			DrawRectangle(start, x + 1, 1, 3, 1, bgColor);
+			DrawRectangle(start, x + 1, 3, 2, 1, bgColor);
+			break;
+
+		case 7:
+			DrawRectangle(start, x, 2, 1, 3, bgColor);
+			DrawRectangle(start, x + 1, 1, 2, 4, bgColor);
+			break;
+
+		case 8:
+			DrawRectangle(start, x + 1, 3, 2, 1, bgColor);
+			DrawRectangle(start, x + 1, 1, 2, 1, bgColor);
+			break;
+
+		case 9:
+			DrawRectangle(start, x, 3, 3, 2, bgColor);
+			DrawRectangle(start, x + 1, 1, 2, 1, bgColor);
+			break;
+
+		default:
+			break;
+	}
+		}
+
 		NST_FORCE_INLINE uint Ppu::OpenSprite() const
 		{
 			return (regs.ctrl[0] & (Regs::CTRL0_SP_OFFSET|Regs::CTRL0_SP8X16)) ? 0x1FF0 : 0x0FF0;
@@ -1449,7 +1582,6 @@ namespace Nes
 					break;
 				}
 			}
-
 			Video::Screen::Pixel* const NST_RESTRICT target = output.target++;
 			*target = output.palette[pixel];
 		}
diff --git a/source/core/NstPpu.hpp b/source/core/NstPpu.hpp
index 12d6e91..e48263d 100644
--- a/source/core/NstPpu.hpp
+++ b/source/core/NstPpu.hpp
@@ -34,6 +34,7 @@
 #include "NstHook.hpp"
 #include "NstMemory.hpp"
 #include "NstVideoScreen.hpp"
+#include "input/NstInpDevice.hpp"
 
 #ifdef NST_PRAGMA_ONCE
 #pragma once
@@ -201,6 +202,7 @@ namespace Nes
 			void EvaluateSpritesPhase7();
 			void EvaluateSpritesPhase8();
 			void EvaluateSpritesPhase9();
+			
 
 			void Reset(bool,bool,bool);
 			void Update(Cycle,uint=0);
@@ -549,6 +551,11 @@ namespace Nes
 			{
 				return oam.spriteLimit;
 			}
+			
+			void DrawInputDisplay(uint buttons, uint frame);
+			void DrawPixel(int start, int x, int y, int color);
+			void DrawRectangle(int start, int x, int y, int w, int h, int color);
+			void DrawNumber(int start, int n, int x);
 		};
 	}
 }
diff --git a/source/core/api/NstApiRewinder.cpp b/source/core/api/NstApiRewinder.cpp
index c768dca..9fcdcc5 100644
--- a/source/core/api/NstApiRewinder.cpp
+++ b/source/core/api/NstApiRewinder.cpp
@@ -41,6 +41,7 @@ namespace Nes
 		{
 			try
 			{
+				emulator.cpu.isClean = false;
 				return emulator.tracker.EnableRewinder( enable ? &emulator : NULL );
 			}
 			catch (Result result)
-- 
2.49.1

